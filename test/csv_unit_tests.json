[
    {
        "test_name": "test_1",
        "input_table_path": "csv_files/movies.tsv",
        "expected_output_table_path": "csv_files/expected_result_1.tsv",
        "csv_separator": "\t",
        "debug_mode": true,
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1, a2, a4, a8 where int(a8) == 142 order by int(a4) desc",
        "query_js": "select a1, a2, a4, a8 where a8 * 1.0 == 142 order by parseInt(a4) desc"
    },
    {
        "test_name": "empty input",
        "input_table_path": "csv_files/empty_table.txt",
        "expected_output_table_path": "csv_files/empty_table.txt",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1, a2, a4, a8 where int(a8) == 142 order by int(a4) desc",
        "query_js": "select a1, a2, a4, a8 where a8 * 1.0 == 142 order by parseInt(a4) desc"
    },
    {
        "test_name": "empty join with absolute join path",
        "input_table_path": "csv_files/movies.tsv",
        "debug_mode": true,
        "expected_output_table_path": "csv_files/empty_table.txt",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1,a2,a7,b2,b3,b4 inner join   ###UT_TESTS_DIR###/csv_files/empty_table.txt  on  a2  ==   b1  where 'Sci-Fi' in a7.split('|') and b2!='US' and int(a4) > 2010",
        "query_js": "select a1,a2,a7,b2,b3,b4 inner join   ###UT_TESTS_DIR###/csv_files/empty_table.txt  on  a2  ==   b1  where a7.split('|').includes('Sci-Fi') && b2!='US' && a4 > 2010"
    },
    {
        "test_name": "test_2",
        "input_table_path": "csv_files/movies.tsv",
        "expected_output_table_path": "csv_files/expected_result_2.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select   DISTINCT a3 where int(a4) < 1960 ORDER    BY a3",
        "query_js": "select   DISTINCT a3 where a4 < 1960 ORDER     BY a3"
    },
    {
        "test_name": "test_3",
        "input_table_path": "csv_files/movies.tsv",
        "expected_output_table_path": "csv_files/expected_result_3.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "utf-8",
        "query_python": "select * where a5 == 'Alejandro G. Iñárritu' order by len(a1)",
        "query_js": "select * where a5 == 'Alejandro G. Iñárritu' order by a1.length"
    },
    {
        "test_name": "join test with relative join paths",
        "input_table_path": "csv_files/movies.tsv",
        "expected_output_table_path": "csv_files/expected_result_4.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1,a2,a7,b2,b3,b4 left join   countries.tsv  on  a2  ==   b1  where 'Sci-Fi' in a7.split('|') and b2!='US' and int(a4) > 2010",
        "query_js": "select a1,a2,a7,b2,b3,b4 left join   countries.tsv  on  a2  ==   b1  where a7.split('|').includes('Sci-Fi') && b2!='US' && a4 > 2010"
    },
    {
        "test_name": "latin-1 with bom",
        "skip_others": false,
        "input_table_path": "csv_files/movies_1_bom.csv",
        "expected_output_table_path": "csv_files/expected_result_5.csv",
        "expected_warnings": [
            "inconsistent input records",
            "inconsistent double quote escaping",
            "BOM removed from input",
            "null values in output were replaced"
        ],
        "csv_separator": ",",
        "csv_policy": "quoted",
        "csv_encoding": "latin-1",
        "output_format": "tsv",
        "query_python": "select 'Movie: ' + a1, None, 2017 - int(a4), format(int(a8) / 60.0, '.2f'), 48 order by a5",
        "query_js": "select 'Movie: ' + a1, null, 2017 - a4, (a8 / 60.0).toFixed(2), 48 order by a5"
    },
    {
        "test_name": "utf-8 with bom js only",
        "input_table_path": "csv_files/movies_1_bom.csv",
        "expected_output_table_path": "csv_files/expected_result_5.csv",
        "bulk_read": true,
        "expected_warnings": [
            "inconsistent input records",
            "BOM removed from input",
            "inconsistent double quote escaping",
            "null values in output were replaced"
        ],
        "csv_separator": ",",
        "csv_policy": "quoted",
        "csv_encoding": "utf-8",
        "output_format": "tsv",
        "query_js": "select 'Movie: ' + a1, null, 2017 - a4, (a8 / 60.0).toFixed(2), 48 order by a5"
    },
    {
        "test_name": "test_6",
        "input_table_path": "csv_files/planes.txt",
        "expected_output_table_path": "csv_files/expected_result_6.txt",
        "csv_separator": ";",
        "csv_policy": "quoted",
        "csv_encoding": "latin-1",
        "output_format": "tsv",
        "query_python": "SELECT * where a10 == a11",
        "query_js": "SELECT * where a10 == a11"
    },
    {
        "test_name": "test_7",
        "input_table_path": "csv_files/movies.tsv",
        "expected_output_table_path": "csv_files/expected_result_7.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select   top    10 a1,* order  by a1 desc",
        "query_js": "select   top    10 a1,* order  by a1 desc"
    },
    {
        "test_name": "test_8",
        "input_table_path": "csv_files/planes.win",
        "expected_output_table_path": "csv_files/expected_result_8.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "SELECT * where len(a5)",
        "query_js": "SELECT * where a5.length"
    },
    {
        "test_name": "test_9",
        "input_table_path": "csv_files/movies_variable_width.tsv",
        "expected_output_table_path": "csv_files/expected_result_9.tsv",
        "expected_warnings": [
            "inconsistent input records"
        ],
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select NR, a1, a3 where NF > 2",
        "query_js": "select NR, a1, a3 where NF > 2"
    },
    {
        "test_name": "join test 10 with relative path",
        "input_table_path": "csv_files/movies_small.tsv",
        "expected_error": "No field with index 4 at record 2 in \"B\" table",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select * inner join ./countries_variable_width.tsv on a2 == b4",
        "query_js": "select * inner join ./countries_variable_width.tsv on a2 == b4"
    },
    {
        "test_name": "empty output",
        "input_table_path": "csv_files/movies_small.tsv",
        "expected_output_table_path": "csv_files/empty_table.txt",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1, a2 where a1 == 'non-esisting-movie-title'",
        "query_js": "select a1, a2 where a1 == 'non-esisting-movie-title'"
    },
    {
        "test_name": "test_12",
        "input_table_path": "csv_files/names.tsv",
        "expected_output_table_path": "csv_files/expected_result_bin_order.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select * order by len(a1)",
        "query_js": "select * order by a1.length"
    },
    {
        "test_name": "test_13",
        "input_table_path": "csv_files/names.tsv",
        "expected_output_table_path": "csv_files/expected_result_unicode_order.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "utf-8",
        "query_python": "select * order by len(a1)",
        "query_js": "select * order by a1.length"
    },
    {
        "test_name": "test_14",
        "input_table_path": "csv_files/countries.tsv",
        "expected_output_table_path": "csv_files/expected_result_10.tsv",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select top 10 a1, * where len(a1) > 10",
        "query_js": "select top 10 a1, * where a1.length > 10"
    },
    {
        "test_name": "test_15",
        "input_table_path": "csv_files/random_1.bin",
        "expected_output_table_path": "csv_files/expected_result_11.bin",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select top 20 a1, a2, a4 where int(a4) > 10 and a2 == 'delta' order by a1, a2 desc",
        "query_js": "select top 20 a1, a2, a4 where a4 > 10 && a2 == 'delta' order by a1, a2 desc"
    },
    {
        "test_name": "join test 16 with advanced relative path",
        "input_table_path": "csv_files/random_1.bin",
        "expected_output_table_path": "csv_files/expected_result_12.bin",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "bulk_read": false,
        "skip_others": false,
        "flaky_repeat_count": 1,
        "csv_encoding": "latin-1",
        "query_python": "select top 15 * join ../csv_files/random_join.bin on a4 == b1 where a2 == b2 and len(a1)>5 and b3.find('a') !=-1 order by a3 asc",
        "query_js": "select top 15 * join ../csv_files/random_join.bin on a4 == b1 where a2 == b2 && a1.length>5 && b3.indexOf('a') !=-1 order by a3 asc"
    },
    {
        "test_name": "test_17",
        "input_table_path": "csv_files/movies_2.csv",
        "expected_output_table_path": "csv_files/expected_result_13.tsv",
        "csv_separator": ",",
        "csv_policy": "quoted",
        "csv_encoding": "latin-1",
        "output_format": "tsv",
        "query_python": "select distinct a2",
        "query_js": "select distinct a2"
    },
    {
        "test_name": "test_18",
        "input_table_path": "csv_files/movies_2.csv",
        "expected_error": "To use non-ascii characters in query enable UTF-8 encoding instead of latin-1/binary",
        "csv_separator": ",",
        "csv_policy": "quoted",
        "csv_encoding": "latin-1",
        "output_format": "tsv",
        "query_python": "select * where a2 = 'Привет'",
        "query_js": "select * where a2 = 'Привет'"
    },
    {
        "test_name": "test_19",
        "input_table_path": "csv_files/movies.tsv",
        "expected_error": "Unable to find join table \"NON_EXISTING_TABLE\"",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select a1,a2,a7,b2,b3,b4 left join   NON_EXISTING_TABLE  on  a2  ==   b1  where 'Sci-Fi' in a7.split('|') and b2!='US' and int(a4) > 2010",
        "query_js": "select a1,a2,a7,b2,b3,b4 left join   NON_EXISTING_TABLE  on  a2  ==   b1  where a7.split('|').includes('Sci-Fi') && b2!='US' && a4 > 2010"
    },
    {
        "test_name": "test_20",
        "input_table_path": "csv_files/countries.tsv",
        "expected_output_table_path": "csv_files/monocolumn_result_set.tsv",
        "csv_separator": "",
        "csv_policy": "monocolumn",
        "csv_encoding": "latin-1",
        "query_python": "select top 20 a1 + ' ' + str(NR)",
        "query_js": "select top 20 a1 + ' ' + NR"
    },
    {
        "test_name": "test_21",
        "input_table_path": "csv_files/whitespace_separated_pids.txt",
        "expected_output_table_path": "csv_files/whitespace_result_set_1.txt",
        "csv_separator": " ",
        "csv_policy": "whitespace",
        "csv_encoding": "latin-1",
        "query_python": "select a2, ARRAY_AGG(a1) where NR > 1 group by a2",
        "query_js": "select a2, ARRAY_AGG(a1) where NR > 1 group by a2"
    },
    {
        "test_name": "test_utf-8_error",
        "input_table_path": "csv_files/random_1.bin",
        "expected_error": "Unable to decode input table as UTF-8. Use binary (latin-1) encoding instead",
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "utf-8",
        "query_python": "select top 20 * where a2 == 'gamma'",
        "query_js": "select top 20 * where a2 == 'gamma'"
    },
    {
        "test_name": "multichar_separator",
        "input_table_path": "csv_files/movies_multichar_separator.txt",
        "expected_output_table_path": "csv_files/movies_multichar_separator_result.txt",
        "csv_separator": "~#~",
        "csv_policy": "simple",
        "csv_encoding": "latin-1",
        "query_python": "select top 10 MAX(int(a4)), MIN(int(a8)), a3 group by a3",
        "query_js": "select top 10 MAX(parseInt(a4)), MIN(parseInt(a8)), a3 group by a3"
    },
    {
        "test_name": "RFC-4180 dialect: newlines in fields",
        "input_table_path": "csv_files/synthetic_rfc_newline_data.csv",
        "expected_output_table_path": "csv_files/synthetic_rfc_newline_data_result.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "latin-1",
        "query_python": "select a3, a2, a2 + ' adjusted', a1",
        "query_js": "select a3, a2, a2 + ' adjusted', a1"
    },
    {
        "test_name": "RFC-4180 dialect: newlines in fields with comments",
        "input_table_path": "csv_files/synthetic_rfc_newline_data_with_comments.csv",
        "expected_output_table_path": "csv_files/synthetic_rfc_newline_data_result.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "latin-1",
        "comment_prefix": ">>",
        "query_python": "select a3, a2, a2 + ' adjusted', a1",
        "query_js": "select a3, a2, a2 + ' adjusted', a1"
    },
    {
        "test_name": "RFC-4180 dialect: corrupted file, bad double quote placement",
        "input_table_path": "csv_files/synthetic_rfc_newline_data_corrupted_middle.csv",
        "expected_error": "Inconsistent double quote escaping in input table at record 3, line 8",
        "expected_error_exact": true,
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "latin-1",
        "query_python": "select a3, a2, a2 + ' adjusted', a1",
        "query_js": "select a3, a2, a2 + ' adjusted', a1"
    },
    {
        "test_name": "RFC-4180 dialect: corrupted file, unbalanced double quote at the end",
        "input_table_path": "csv_files/synthetic_rfc_newline_data_corrupted.csv",
        "expected_error": "Inconsistent double quote escaping in input table at record 11, line 21",
        "expected_error_exact": true,
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "latin-1",
        "query_python": "select a3, a2, a2 + ' adjusted', a1",
        "query_js": "select a3, a2, a2 + ' adjusted', a1"
    },
    {
        "test_name": "named fields",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result1.csv",
        "csv_separator": ",",
        "with_headers": true,
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "query_python": "select a.world_rank, a.university_name where a.country == 'France' and int(a.world_rank) < 50",
        "query_js": "select a.world_rank, a.university_name where a.country == 'France' && parseInt(a.world_rank) < 50"
    },
    {
        "test_name": "named fields with comments",
        "input_table_path": "csv_files/university_ranking_with_comments.csv",
        "expected_output_table_path": "csv_files/university_ranking_result7.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "comment_prefix": "#",
        "query_python": "select a.world_rank, a.university_name order by a.university_name",
        "query_js": "select a.world_rank, a.university_name order by a.university_name"
    },
    {
        "test_name": "except named fields",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result2.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "select top 5 * except a.country, a.world_rank",
        "query_js": "select top 5 * except a.country, a.world_rank"
    },
    {
        "test_name": "update named fields",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result3.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "update a.country = a.country.upper(), a.num_students = a.num_students.replace(',', '')",
        "query_js": "update a.country = a.country.toUpperCase(), a.num_students = a.num_students.replace(/,/g, '')"
    },
    {
        "test_name": "join named fields, abs join path",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result4.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "expected_warnings": [
            "The first record in JOIN file countries.csv was also treated as header (and skipped)"
        ],
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "select top 20 a2, b.country, b.Population join ###UT_TESTS_DIR###/csv_files/countries.csv on a.country == b.country order by a.university_name",
        "query_js": "select top 20 a2, b.country, b.Population join ###UT_TESTS_DIR###/csv_files/countries.csv on a.country == b.country order by a.university_name"
    },
    {
        "test_name": "dict fields",
        "input_table_path": "csv_files/countries.csv",
        "expected_output_table_path": "csv_files/countries_result1.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "select top 10 a1, a['Area square miles'], a[\"GDP per capita\"] where int(a['Area square miles']) > 1000000 order by int(a['GDP per capita']) desc",
        "query_js": "select top 10 a1, a['Area square miles'], a[\"GDP per capita\"] where parseInt(a['Area square miles']) > 1000000 order by parseInt(a['GDP per capita']) desc"
    },
    {
        "test_name": "dict fields unicode",
        "input_table_path": "csv_files/countries_utf_header.csv",
        "expected_output_table_path": "csv_files/countries_result1_unicode.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "select top 10 a1, a['Площадь - Квадратные мили'], a[\"ВВП на душу населения\"] where int(a['Площадь - Квадратные мили']) > 1000000 order by int(a['ВВП на душу населения']) desc",
        "query_js": "select top 10 a1, a['Площадь - Квадратные мили'], a[\"ВВП на душу населения\"] where parseInt(a['Площадь - Квадратные мили']) > 1000000 order by parseInt(a['ВВП на душу населения']) desc"
    },
    {
        "test_name": "aggregate dict fields",
        "input_table_path": "csv_files/countries.csv",
        "expected_output_table_path": "csv_files/countries_result2.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "query_python": "select a.Region, max(a['Area square miles']), MIN(a['Area square miles']), MAX(a[\"GDP per capita\"]), min(a[\"GDP per capita\"]) GROUP BY a.Region",
        "query_js": "select a.Region, max(a['Area square miles']), MIN(a['Area square miles']), MAX(a[\"GDP per capita\"]), min(a[\"GDP per capita\"]) GROUP BY a.Region"
    },
    {
        "test_name": "bad field name",
        "input_table_path": "csv_files/countries.csv",
        "expected_error": "Unable to find column \"foobar\" in input CSV header line",
        "expected_error_exact": true,
        "csv_separator": ",",
        "with_headers": true,
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "randomly_replace_var_names": false,
        "query_python": "select top 10 int(a.foobar) + 20, 'hello'",
        "query_js": "select top 10 parseInt(a.foobar) + 20, 'hello'"
    },
    {
        "test_name": "bad dict field name",
        "input_table_path": "csv_files/countries.csv",
        "expected_error": "No \"foobar\" field at record 1",
        "csv_separator": ",",
        "with_headers": true,
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "randomly_replace_var_names": false,
        "query_python": "select a['foobar'], 100"
    },
    {
        "test_name": "JS: demonstration of failure to handle unknown field",
        "input_table_path": "csv_files/countries.csv",
        "with_headers": true,
        "expected_output_table_path": "csv_files/countries_result4.csv",
        "expected_warnings": [
            "null values in output were replaced"
        ],
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "randomly_replace_var_names": false,
        "query_js": "select top 3 a['foobar'], 100"
    },
    {
        "test_name": "named fields in interpolated strings",
        "input_table_path": "csv_files/countries.csv",
        "expected_output_table_path": "csv_files/countries_result3.csv",
        "randomly_replace_var_names": false,
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "minimal_python_version": "3.7",
        "query_python": "select top 10 a1, f\"area: {a['Area square miles'] + ', GDP: ' + a['GDP per capita']} - '{a.country}' stats\" where int(a['Area square miles']) > 1000000 order by int(a['GDP per capita']) desc",
        "query_js": "select top 10 a1, `area: ${a['Area square miles'] + ', GDP: ' + a['GDP per capita']} - '${a.country}' stats` where parseInt(a['Area square miles']) > 1000000 order by parseInt(a['GDP per capita']) desc"
    },
    {
        "test_name": "named fields in interpolated triple-quoted strings",
        "input_table_path": "csv_files/countries.csv",
        "expected_output_table_path": "csv_files/countries_result3.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "minimal_python_version": "3.7",
        "query_python": "select top 10 a1, f\"\"\"area: {a['Area square miles'] + ', GDP: ' + a[\"GDP per capita\"]} - '{a.country}' stats\"\"\" where int(a['Area square miles']) > 1000000 order by int(a['GDP per capita']) desc",
        "query_js": "select top 10 a1, `area: ${a[`Area square miles`] + ', GDP: ' + a['GDP per capita']} - '${a.country}' stats` where parseInt(a[`Area square miles`]) > 1000000 order by parseInt(a['GDP per capita']) desc"
    },
    {
        "test_name": "update named fields - unknown field error",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_error": "Unable to parse \"UPDATE\" expression: Unknown field name: \"a['foo-bar']\"",
        "csv_separator": ",",
        "with_headers": true,
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "query_python": "update a.country = a.country.upper(), a.num_students = a.num_students.replace(',', ''), a['foo-bar'] = len(a.country)",
        "query_js": "update a.country = a.country.toUpperCase(), a.num_students = a.num_students.replace(/,/g, ''), a['foo-bar'] = a.country.length"
    },
    {
        "test_name": "RFC-4180 dialect: newlines in fields",
        "input_table_path": "csv_files/rfc_newlines_in_header.csv",
        "expected_output_table_path": "csv_files/rfc_newlines_in_header_result.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "latin-1",
        "query_python": "select NR, a3 + '|' + a1, a2, NF",
        "query_js": "select NR, a3 + '|' + a1, a2, NF"
    },
    {
        "test_name": "select named fields with header",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result6.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "query_python": "select top 5 NR, *",
        "query_js": "select top 5 NR, *"
    },
    {
        "test_name": "select named fields with `noheader` in query",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result8.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "query_python": "select top 5 NR, * with (noheader)",
        "query_js": "select top 5 NR, * with (noheader)"
    },
    {
        "test_name": "inconsistent header length",
        "input_table_path": "csv_files/movies_variable_width_header.tsv",
        "expected_error": "Inconsistent number of columns in output header and the current record: 9 != 7",
        "skip_others": false,
        "csv_separator": "\t",
        "csv_policy": "simple",
        "csv_encoding": "utf-8",
        "query_python": "select top 5 NR, * with(header)",
        "query_js": "select top 5 NR, * with(header)"
    },
    {
        "test_name": "join with whitespace in join var",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result4.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "expected_warnings": [
            "The first record in JOIN file countries2.csv was also treated as header (and skipped)"
        ],
        "csv_encoding": "utf-8",
        "with_headers": true,
        "query_python": "select top 20 a2, a['country'], b.Population join countries2.csv on a.country == b['country name'] order by a.university_name",
        "query_js": "select top 20 a2, a['country'], b.Population join countries2.csv on a.country == b['country name'] order by a.university_name"
    },
    {
        "test_name": "join named fields with header",
        "input_table_path": "csv_files/university_ranking.csv",
        "expected_output_table_path": "csv_files/university_ranking_result5.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "debug_mode": true,
        "expected_warnings": [
            "The first record in JOIN file countries.csv was also treated as header (and skipped)"
        ],
        "query_python": "select top 20 NR, a2, b.country, b.Population join countries.csv on a.country == b.country order by a.university_name desc",
        "query_js": "select top 20 NR, a2, b.country, b.Population join countries.csv on a.country == b.country order by a.university_name desc"
    },
    {
        "test_name": "Nonexistent output directory",
        "input_table_path": "csv_files/movies.tsv",
        "absolute_output_table_path": "/non/existent/path/to/output/table.tsv",
        "expected_error_js": "ENOENT: no such file or directory, open '/non/existent/path/to/output/table.tsv'",
        "expected_error_py": "[Errno 2] No such file or directory",
        "skip_others": false,
        "csv_separator": "\t",
        "debug_mode": false,
        "csv_policy": "simple",
        "csv_encoding": "utf-8",
        "query_python": "select a1, a2, a4, a8 where int(a8) == 142 order by int(a4) desc",
        "query_js": "select a1, a2, a4, a8 where a8 * 1.0 == 142 order by parseInt(a4) desc"
    },
    {
        "test_name": "join strip spaces",
        "input_table_path": "csv_files/university_ranking_with_extra_whitespaces.csv",
        "expected_output_table_path": "csv_files/university_ranking_result5.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "strip_whitespaces": true,
        "debug_mode": true,
        "expected_warnings": [
            "The first record in JOIN file countries_with_extra_whitespaces.csv was also treated as header (and skipped)"
        ],
        "query_python": "select top 20 NR, a2, b.country, b.Population join countries_with_extra_whitespaces.csv on a.country == b.country order by a.university_name desc",
        "query_js": "select top 20 NR, a2, b.country, b.Population join countries_with_extra_whitespaces.csv on a.country == b.country order by a.university_name desc"
    },
    {
        "test_name": "join do not strip spaces",
        "input_table_path": "csv_files/university_ranking_with_extra_whitespaces.csv",
        "expected_output_table_path": "csv_files/university_ranking_result9.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "csv_encoding": "utf-8",
        "with_headers": true,
        "debug_mode": true,
        "expected_warnings": [
            "The first record in JOIN file countries_with_extra_whitespaces.csv was also treated as header (and skipped)"
        ],
        "query_python": "select top 5 NR, a2, b1, b3 join countries_with_extra_whitespaces.csv on a3 == b1 order by a2 desc",
        "query_js": "select top 5 NR, a2, b1, b3 join countries_with_extra_whitespaces.csv on a3 == b1 order by a2 desc"
    },
    {
        "test_name": "comment_regex",
        "input_table_path": "csv_files/countries.csv",
        "expected_output_table_path": "csv_files/countries_result_comment_regex.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "comment_regex": "stan",
        "query_python": "select * order by a.country limit 10",
        "query_js": "select * order by a.country limit 10"
    },
    {
        "test_name": "Bad header: empty strings and duplicate values in header",
        "input_table_path": "csv_files/countries_bad_header.csv",
        "expected_output_table_path": "csv_files/countries_bad_header_result1.csv",
        "csv_separator": ",",
        "csv_policy": "quoted_rfc",
        "with_headers": true,
        "csv_encoding": "utf-8",
        "query_python": "select top 100 a.Dup_header, a[''], * where NR < 20",
        "query_js": "select top 100 a.Dup_header, a[''], * where NR < 20"
    }
]
